rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType in ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'] &&
        request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId) && isValidImageFile();
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Question images and attachments
    match /questions/{questionId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && (isValidImageFile() || isValidDocumentFile());
      allow delete: if isAdmin();
    }
    
    // System assets (logos, banners, etc.)
    match /system/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Backup files (admin only)
    match /backups/{fileName} {
      allow read, write: if isAdmin();
    }
    
    // Reports and exports
    match /reports/{userId}/{fileName} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
